class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        int n = nums.length;
        Arrays.sort(nums);
        Set<List<Integer>> ans = new HashSet<>();
        rec(0, n, nums, ans, new ArrayList<>());
        return new ArrayList<>(ans);
    }
    void rec(int ind, int n, int[] nums, Set<List<Integer>> ans, List<Integer> subset)
    {
        if (ind == n) {
            ans.add(new ArrayList<>(subset));
            return;
        }
        subset.add(nums[ind]);
        rec(ind + 1, n, nums, ans, subset);
        subset.remove(subset.size() - 1);
        rec(ind + 1, n, nums, ans, subset);
    }
}
// TC: O(2^n * n) SC: O(2^n)