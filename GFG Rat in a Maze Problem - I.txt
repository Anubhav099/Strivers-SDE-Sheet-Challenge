// m is the given matrix and n is the order of matrix
class Solution {
    public static ArrayList<String> findPath(int[][] m, int n) {
        // Your code here
        ArrayList<String> ans = new ArrayList<>();
        soln(0,0,m,n,ans, new StringBuilder());
        if (ans.isEmpty()) ans.add("-1");
        return ans;
    }
    
    public static void soln(int i, int j, int[][] m, int n, List<String> ans, StringBuilder ds)
    {
        if (i<0 || i>n-1 || j<0 || j>n-1 || m[i][j] == 0 ) return;
        
        if (i == n-1 && j == n-1) {
            ans.add(new String(ds));
            return;
        }
        
        m[i][j] = 0;
        
        ds.append("D");
        soln( i+1, j, m, n, ans, ds);
        ds.deleteCharAt(ds.length() - 1);
            
        ds.append("U");
        soln( i-1, j, m, n, ans, ds);
        ds.deleteCharAt(ds.length() - 1);
            
        ds.append("R");
        soln( i, j+1, m, n, ans, ds);
        ds.deleteCharAt(ds.length() - 1);
            
        ds.append("L");
        soln( i, j-1, m, n, ans, ds);
        ds.deleteCharAt(ds.length() - 1);
        
        m[i][j] = 1;
    }
}
// TC: O( 4^(n*n) ), SC: O( auxilary space( n*n-1 )