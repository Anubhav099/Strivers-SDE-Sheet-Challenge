/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list1 == null)   return list2;
        if(list2 == null)   return list1;
        
        ListNode head = new ListNode();
        ListNode dummy = head;
        while(list1 != null && list2 != null)
        {
            ListNode nextNode;
            if(list1.val <= list2.val){
                nextNode = list1;
                list1 = list1.next;
            }
            else
            {
                nextNode = list2;
                list2 = list2.next;
            }
            dummy.next = nextNode;
            dummy = nextNode; 
        }

        while(list1!=null)
        {
            ListNode newNode = list1;
            dummy.next = newNode;
            dummy = dummy.next;
            list1 = list1.next;
        }
        while(list2!=null)
        {
            ListNode newNode = list2;
            dummy.next = newNode;
            dummy = dummy.next;
            list2 = list2.next;
        }
        return head.next;
    }
}
//TC: O(n1+n2), SC: O(1+n1+n2)