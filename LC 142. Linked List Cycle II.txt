/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;

        do
        {
            if( slow == null || fast == null || fast.next == null ) return null;
            slow = slow.next;
            fast = fast.next.next;
        }while( slow != fast );

        fast = head;
        while(slow!=fast)
        {
            slow = slow.next;
            fast = fast.next;
        }
        return slow;
    }
}
// TC: O(n), SC: O(1)
// Can also be solved using a HashSet<ListNode> with SC: O(n)