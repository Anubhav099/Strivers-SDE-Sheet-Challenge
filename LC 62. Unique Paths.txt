class Solution {
    public int soln(int i, int j, int m, int n, int[][] dp)
    {
        if(i == m-1 && j == n-1)    return 1;
        int cnt=0;
        if(dp[i][j]!=0) return dp[i][j];
        if(i<m-1) cnt += soln(i+1,j,m,n,dp);
        if(j<n-1) cnt += soln(i,j+1,m,n,dp);
        dp[i][j] = cnt;
        return cnt;
    }

    // public double nCr(int n, int r)
    // {
    //     double ans = 1;
    //     for(int i=0; i<r; i++)
    //     {
    //         ans *= n-i;
    //         ans /= i+1;
    //     }
    //     return ans;
    // }

    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];
        
        return soln(0,0,m,n,dp);

        // // Another soln: using Maths, we can deduce the ans is (m-1)+(n-1)Combination{(m-1) or (n-1)}
        // return (int)nCr(m+n-2, Math.min(m,n)-1);
    }
}