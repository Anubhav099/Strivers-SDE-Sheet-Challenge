class Solution {
    public int singleNonDuplicate(int[] nums) {
        int low = 0;
        int high = nums.length - 2;
        // if the ans is last element, then everything is in the left half and the low will try to shift to right half and eventually land on the last elem
        // Also if the nums.length = 1, then low = 0, high = -1 and hence while loop will not run and it will return nums[low=0]
        while (low <= high) {
            int mid = (low + high) / 2;
            if (nums[mid] == nums[mid^1]) low = mid + 1;
            // we are in the left part
            else high = mid - 1;
            // we are in the right part
        }
        return nums[low];
    }
}
// TC: O(log n), SC: O(1)