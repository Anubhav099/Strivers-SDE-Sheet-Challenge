/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        Node temp = head;
	    //step 1: Add dummy nodes in bw the original nodes.
        while(temp != null)
        {
            Node newNode = new Node(temp.val);
            newNode.next = temp.next;
            temp.next = newNode;
            temp = temp.next.next;
        }
	    //step 2: Add random-values to the dummy nodes.
        Node itr = head;
        while(itr != null)
        {
            if(itr.random != null)
                itr.next.random = itr.random.next;
            itr = itr.next.next;
        }
	    //step 3: Seperate the two lists.
        Node dummy = new Node(0);
        itr = head;
        temp = dummy;
        while(itr != null) 
        {
            temp.next = itr.next;
            itr.next = itr.next.next;
            temp = temp.next;
            itr = itr.next;
        }
        return dummy.next;
    }
}
// TC: O(3n), SC: O(1)