class Solution {
    public List<Integer> majorityElement(int[] nums) {

        // Extended Moore's Voting Algo for >n/3    TC: O(2n) & SC: O(1)
        List<Integer> ans = new ArrayList<>();
        int cnt1=0, cnt2=0, el1=Integer.MIN_VALUE, el2=Integer.MIN_VALUE;
        for(int i=0; i<nums.length; i++)
        {
            if(cnt1==0 && el2 != nums[i])
            {
                cnt1=1;
                el1=nums[i];
            }
            else if(cnt2==0 && el1 != nums[i])
            {
                cnt2=1;
                el2 = nums[i];
            }
            else if(el1 == nums[i]) cnt1++;
            else if(el2 == nums[i]) cnt2++;
            else
            {
                cnt1--; cnt2--;
            }
        }
        cnt1=0; cnt2=0;
        for(int i=0; i<nums.length; i++)
        {
            if(nums[i] == el1)  cnt1++;
            if(nums[i] == el2)  cnt2++;
        }

        int mini = nums.length/3;
        if(cnt1 > mini) ans.add(el1);
        if(cnt2 > mini) ans.add(el2);
        
        // // Alternative Apporach TC: O(nlogn+n) & SC: O(1)
        // Arrays.sort(nums);
        // int cnt=0;
        // int el=nums[0];
        
        // for(int i=0; i<nums.length; i++)
        // {
        //     if(el == nums[i])
        //     {
        //         cnt++;
        //     }
        //     else
        //     {
        //         el = nums[i];
        //         cnt=1;
        //     }
        //     if(cnt>nums.length/3)
        //     {
        //         if (!ans.contains(el))
        //             ans.add(el);
        //     }
        // }
        return ans;
    }
}