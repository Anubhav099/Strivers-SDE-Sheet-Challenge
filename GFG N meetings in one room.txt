class Meeting
{
    int start;
    int end;
    int pos;
    
    Meeting(int start, int end, int pos)
    {
        this.start = start;
        this.end = end;
        this.pos = pos;
    }
}

class MeetingComparator implements Comparator<Meeting>
{
    public int compare(Meeting o1, Meeting o2)
    {
        if(o1.end<o2.end) return -1;
        else if(o1.end>o2.end) return 1;
        else if(o1.pos<o2.pos) return -1;
        return 1;
    }
    
}

class Solution 
{
    
    public static int maxMeetings(int start[], int end[], int n)
    {
        if(n==0) return 0;
        // add your code here
        ArrayList<Meeting> meet = new ArrayList<>();
        
        for(int i=0; i<n; i++)
            meet.add(new Meeting(start[i], end[i], i+1));
        
        Collections.sort(meet, new MeetingComparator());
        
        int lastEndTime = meet.get(0).end;
        int count = 1;
        
        for(int i=1; i<n; i++)
        {
            if( meet.get(i).start > lastEndTime )
            {
                count++;
                lastEndTime = meet.get(i).end;
            }
        }
        return count;
    }
}
// TC: O(n + nlogn + n), SC: O(n)